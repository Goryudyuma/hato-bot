name: pr-test

# master,developへ直接pushされた時と、pull_requestで何かあった時に起動する
on:
  push:
    branches: [ master, develop ]
  pull_request:

jobs:
  pr-format:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: pipenv cache
      uses: actions/cache@v1
      with:
        key: ${{ runner.os }}-${{ matrix.python-version }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
        path: ~/.cache/pipenv
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pipenv-
    - name: pip cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev
    - name: Format files
      id: format
      run: |
        pipenv run autopep8 --exit-code --in-place --recursive .
      continue-on-error: true
    - name: Commit
      if: steps.format.exitcode == 2
      uses: actions/github-script@0.9.0
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.git.createCommit({
            context.repo.owner,
            context.repo.repo,
            "鳩は唐揚げ！(自動で直してあげたよ！)",
            ${{ github.sha }},
            [${{ github.sha }}]
          })
    - name: Push
      if: steps.format.exitcode == 2
      run: git push https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git HEAD:${{github.event.pull_request.head.ref}}


  
  pr-test:
    needs: pr-format
  
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: pipenv cache
      uses: actions/cache@v1
      with:
        key: ${{ runner.os }}-${{ matrix.python-version }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
        path: ~/.cache/pipenv
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pipenv-
    - name: pip cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev
    - name: Test
      run: |
        pipenv run python -m unittest
  
  pr-lint:
    needs: pr-format

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0
    - name: pipenv cache
      uses: actions/cache@v1
      with:
        key: ${{ runner.os }}-${{ matrix.python-version }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
        path: ~/.cache/pipenv
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pipenv-
    - name: pip cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev
    - name: Lint files
      id: lint
      run: |
        git fetch --no-tags --prune --depth=1 origin ${GITHUB_HEAD_REF}
        git fetch --no-tags --prune --depth=1 origin ${GITHUB_BASE_REF}
        pipenv run pylint $(git diff origin/${GITHUB_BASE_REF}..origin/${GITHUB_HEAD_REF} --diff-filter=AM --name-only -- '*.py')
    - name: Lint Comment
      if: steps.format.exitcode != 2
      uses: actions/github-script@0.9.0
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: ${{steps.format.outputs}}
          })
